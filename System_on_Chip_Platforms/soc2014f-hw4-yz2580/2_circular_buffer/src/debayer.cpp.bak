#include "debayer.h"

#define PIXEL_MAX 65535

static u16 compute_and_clamp_pixel(
    u16 pos,
    u16 neg)
{
    if (pos < neg)
    {
        return 0;
    }
    else
    {
        const u16 pixel = (pos - neg) >> 3;
        if (pixel > PIXEL_MAX) { return PIXEL_MAX; }
        else { return pixel; }
    }
}

/*
 * This version handles masks with fractional negative values. In those
 * cases truncating before subtraction does not generally yield the
 * same result as truncating after subtraction.  The negative value
 * is using weights in units of 1/16ths so that the one-half portions
 * are retained.
 */
static u16 compute_and_clamp_pixel_fractional_neg(
    u16 pos,
    u16 neg)
{
    /*
     * The positive portion is converted to u32 prior to doubling because
     * otherwise some of the weights could yield overflow. At that point,
     * all weights are effectively 16x their actual value, so combining
     * the positive and negative portions and then shifting by four bits
     * yields the equivalent of a floor() applied to the result of the
     * full precision convolution.
     */
    const u32 pos_u32 = ((u32) pos) << 1;
    const u32 neg_u32 = (u32) neg;
    if (pos_u32 < neg_u32)
    {
        return 0;
    }
    else
    {
        const u16 pixel = (u16) ((pos_u32 - neg_u32) >> 4);
        if (pixel > PIXEL_MAX) { return PIXEL_MAX; }
        else { return pixel; }
    }
}



/**
 * Notice that every large array (local memory) access
 * has to be followed by an explicit wait(). Real memories
 * are usually synchronous and require at least one clock
 * cycle in order to access or write a location.
 * By default CtoS scheduler is not allowed to move memory
 * accesses, thus scheduling fails if trying to access memory
 * without an explicit wait().
 * Multiple read / write could occur during the same cycle
 * if the memory has more than one port.
 * For this assignment we only use standard memories with
 * two ports; ports are bound automatically to processes by
 * CtoS, thus one port of the circular buffer is used by
 * process load_input(), while the other is used by
 * process_debayer().
 */
u16 debayer::interp_G_at_RRR_or_G_at_BBB(u32 row, u32 col)
{
}

u16 debayer::interp_R_at_GRB_or_B_at_GBR(u32 row, u32 col)
{
}

u16 debayer::interp_R_at_GBR_or_B_at_GRB(u32 row,  u32 col)
{
}

u16 debayer::interp_R_at_BBB_or_B_at_RRR(u32 row, u32 col)
{
}


void debayer::wami_debayer(int cols, int img_row,
			   int cb_row, bool ping)
{
	/*
	 * In addition to what you did in part 1, you must
	 * update arrays indexes knowing that you only have
	 * a 6-rows circular buffer for the input and two ping
	 * pong memories, eahc of size 1 row for the output.
	 *
	 * HINT: since you only compute one row, what happens
	 *       to the outer loops over image rows??
	 */


}


void debayer::config_debayer()
{
	// Initialization at reset

	// Read configuration until done

	// Let other threads run then do nothing
	init_done.write(true);
	while (true) {
		wait();
	}
}


void debayer::load_input()
{
RESET_LOAD:
	// Initialization at reset

	// Wait for init_done from configuration and read image size

LOAD_INPUT_WHILE:
	while(true) {

		// If the entire image has been loaded wait for reset from TB


		// Send DMA request
		// Notice that this implementation is processing one row per burst!

		// 4-phase handshake load_input() with TB

		// Loop over the entire array to get the image pixels
		// Make sure CtoS knows the maximum number of iterations, but
		// do not run useless iterations!
		// In addition, make sure you handle properly the circular buffer!

		// 4-phase handshake load_input() with process_debayer()
	}
}



void debayer::process_debayer()
{
	// Initialization at reset

	// Wait for init_done from configuration and read image size

DEBAYER_WHILE:
	while (true) {

		// If the entire image has been processed wait for reset from TB

		// 4-phase handshake process_debayer() with load_input()

		// Call wami_debayer(). See the header file for arguments description!
		wami_debayer(rows, img_row, cb_row, ping);

		// 4-phase handshake process_debayer() with store_output()
	}
}

void debayer::store_output()
{
	// Initialization at reset

	// Wait for init_done from configuration and read image size

STORE_OUTPUT_WHILE:
	while(true) {

		// If the entire image has been sent to TB
		// set debayer_done and wait for reset from TB

		// 4-phase handshake store_output() with process_debayer()

		// Send DMA request

		// 4-phase handshake store_output() with TB

		// Loop over the entire array to send the output image pixels
		// Make sure CtoS knows the maximum number of iterations, but
		// do not run useless iterations!
		// In addition, alternate ping-pong buffers to store the output.
		// Ping-pong allows for concurrent output and computation.
	}
}

#ifdef __CTOS__
SC_MODULE_EXPORT(debayer)
#endif
